{"ast":null,"code":"var _jsxFileName = \"E:\\\\FRONT END\\\\Reactjs\\\\login\\\\frontend\\\\src\\\\pages\\\\Authentication.js\";\nimport { json, redirect } from 'react-router-dom';\nimport AuthForm from '../components/AuthForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthenticationPage() {\n  return /*#__PURE__*/_jsxDEV(AuthForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 10\n  }, this);\n}\n_c = AuthenticationPage;\nexport default AuthenticationPage;\nexport async function action({\n  request\n}) {\n  const searchParams = new URL(request.url).searchParams;\n  const mode = searchParams.get('mode') || 'login';\n  if (mode !== 'login' && mode !== 'signUp') {\n    throw json({\n      message: 'Invalid mode'\n    });\n  }\n  const data = await request.formData();\n  const authData = {\n    email: data.get('email'),\n    passward: data.get('password')\n  };\n  const response = await fetch('http://localhost:8080/' + mode, {\n    method: \"post\",\n    header: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(authData)\n  });\n  if (!response.ok) {\n    throw json({\n      message: 'Authentication failed'\n    }, {\n      status: 500\n    });\n  }\n  return redirect();\n}\nvar _c;\n$RefreshReg$(_c, \"AuthenticationPage\");","map":{"version":3,"names":["json","redirect","AuthForm","jsxDEV","_jsxDEV","AuthenticationPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","searchParams","URL","url","mode","get","message","data","formData","authData","email","passward","response","fetch","method","header","body","JSON","stringify","ok","status","$RefreshReg$"],"sources":["E:/FRONT END/Reactjs/login/frontend/src/pages/Authentication.js"],"sourcesContent":["import { json, redirect } from 'react-router-dom';\nimport AuthForm from '../components/AuthForm';\n\nfunction AuthenticationPage() {\n  return <AuthForm />;\n}\n\nexport default AuthenticationPage;\nexport async function action({ request }) {\n  const searchParams = new URL(request.url).searchParams;\n  const mode = searchParams.get('mode') || 'login';\n  if (mode !== 'login' && mode !== 'signUp') {\n    throw json({ message: 'Invalid mode' }) \n  }\n  const data = await request.formData();\n  const authData = {\n    email: data.get('email'),\n    passward: data.get('password')\n  }\n  const response = await fetch('http://localhost:8080/' + mode, {\n    method: \"post\",\n    header: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(authData),\n\n  });\n  if (!response.ok){\n    throw json({message: 'Authentication failed'},{status:500})\n  }\n  return redirect ()\n}"],"mappings":";AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AACjD,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,kBAAkBA,CAAA,EAAG;EAC5B,oBAAOD,OAAA,CAACF,QAAQ;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACrB;AAACC,EAAA,GAFQL,kBAAkB;AAI3B,eAAeA,kBAAkB;AACjC,OAAO,eAAeM,MAAMA,CAAC;EAAEC;AAAQ,CAAC,EAAE;EACxC,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAACF,OAAO,CAACG,GAAG,CAAC,CAACF,YAAY;EACtD,MAAMG,IAAI,GAAGH,YAAY,CAACI,GAAG,CAAC,MAAM,CAAC,IAAI,OAAO;EAChD,IAAID,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,QAAQ,EAAE;IACzC,MAAMhB,IAAI,CAAC;MAAEkB,OAAO,EAAE;IAAe,CAAC,CAAC;EACzC;EACA,MAAMC,IAAI,GAAG,MAAMP,OAAO,CAACQ,QAAQ,CAAC,CAAC;EACrC,MAAMC,QAAQ,GAAG;IACfC,KAAK,EAAEH,IAAI,CAACF,GAAG,CAAC,OAAO,CAAC;IACxBM,QAAQ,EAAEJ,IAAI,CAACF,GAAG,CAAC,UAAU;EAC/B,CAAC;EACD,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,GAAGT,IAAI,EAAE;IAC5DU,MAAM,EAAE,MAAM;IACdC,MAAM,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC9CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,QAAQ;EAE/B,CAAC,CAAC;EACF,IAAI,CAACG,QAAQ,CAACO,EAAE,EAAC;IACf,MAAM/B,IAAI,CAAC;MAACkB,OAAO,EAAE;IAAuB,CAAC,EAAC;MAACc,MAAM,EAAC;IAAG,CAAC,CAAC;EAC7D;EACA,OAAO/B,QAAQ,CAAE,CAAC;AACpB;AAAC,IAAAS,EAAA;AAAAuB,YAAA,CAAAvB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}